#include <bits/stdc++.h>

// Implement class for minStack.

class minStack

{

  stack<int> st;

  int mini;

public:
  // Constructor

  minStack()

  {

    mini = INT_MAX;
  }

  // Function to add another element equal to num at the top of stack.

  void push(int num)

  {

    if (st.empty())
    {

      st.push(num);

      mini = num;
    }

    else
    {

      if (num >= mini)
      {

        st.push(num);
      }

      else
      {

        int val = (2 * num) - mini;

        st.push(val);

        mini = num;
      }
    }
  }

  // Function to remove the top element of the stack.

  int pop()

  {

    if (st.empty())

      return -1;

    else
    {

      int curr = st.top();

      st.pop();

      if (curr < mini)
      {

        int val = mini;

        mini = (2 * mini) - curr;

        return val;
      }

      else
      {

        return curr;
      }
    }
  }

  // Function to return the top element of stack if it is present. Otherwise return -1.

  int top()

  {

    if (st.empty())

      return -1;

    else if (st.top() >= mini)

      return st.top();

    else
    {

      return mini;
    }
  }

  // Function to return minimum element of stack if it is present. Otherwise return -1.

  int getMin()

  {

    if (st.empty())

      return -1;

    else

      return mini;
  }
};